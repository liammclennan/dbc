// Generated by CoffeeScript 1.3.3
(function() {
  var assert, dbc, _ref;

  _ref = [require('assert'), require('../dbc')], assert = _ref[0], dbc = _ref[1];

  describe('dbc', function() {
    return describe('asserting', function() {

      describe('asserting property types', function() {
        it('should do nothing if the object matches the definition', function () {
          dbc.assertPropertyTypes({a:1, b:'hello'}, {a:'number', b: 'string'});
        });

	it('should error if a property is undefined', function () {
	  assert.throws(function () {
	    dbc.assertPropertyTypes({a:1}, {a:'number', b: 'string'});
	  });        
	});

	it('should error if a property is of the wrong type', function () {
	  assert.throws(function () {
	    dbc.assertPropertyTypes({a: 1,b: 2}, {a:'number', b: 'string'});
	  });
	});
      });


      describe('a true condition', function() {
        return it('should do nothing', function() {
          return dbc.assert(true, 'message');
        });
      });
      describe('a false condition', function() {
        return it('should throw an error', function() {
          return assert.throws(function() {
            return dbc.assert(false, 'error message', Error);
          });
        });
      });
      describe('that something is a function', function() {
        describe('for a function', function() {
          return it('should do nothing', function() {
            var f;
            f = function() {};
            return dbc.assert_is_function(f, 'message');
          });
        });
        describe('for null', function() {
          return it('should throw an error', function() {
            return assert.throws(function() {
              return dbc.assert(false, 'error message', Error);
            });
          });
        });
        describe('for undefined', function() {
          return it('should throw an error', function() {
            return assert.throws(function() {
              return dbc.assert(false, 'error message', Error);
            });
          });
        });
        return describe('for an object', function() {
          return it('should throw an error', function() {
            return assert.throws(function() {
              return dbc.assert(false, 'error message', function(err) {
                return err instanceof Error && err.message === 'error message';
              });
            });
          });
        });
      });
      return describe('that an object is an instance of a type', function() {
        var other, type, _ref1;
        _ref1 = [{}, {}], type = _ref1[0], other = _ref1[1];
        before(function() {
          var Other, Person;
          type = Person = (function() {

            function Person(name) {
              this.name = name;
            }

            return Person;

          })();
          return other = Other = (function() {

            function Other() {}

            return Other;

          })();
        });
        describe('for an instance of a type', function() {
          return it('should do nothing', function() {
            return dbc.assert_is_instance(new type('john'), type, 'error message');
          });
        });
        describe('for an instance of a different type', function() {
          return it('should throw an error', function() {
            return assert.throws(function() {
              return dbc.assert_is_instance(new other(), type);
            }, function(err) {
              return err instanceof Error && err.message === 'expected [object Object] to be an instance of Person';
            });
          });
        });
        return describe('for an object', function() {
          return it('should throw an error', function() {
            return assert.throws(function() {
              return dbc.assert_is_instance({
                a: 1
              }, type, 'error message');
            }, Error);
          });
        });
      });
    });
  });

}).call(this);
